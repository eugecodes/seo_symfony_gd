<?php

namespace backend\controllers;

use Yii;
use common\models\Cliente;
use backend\models\search\ClienteSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use common\models\Organicas;
use common\models\Informes;

/**
 * ClienteController implements the CRUD actions for Cliente model.
 */
class ClienteController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post']
                ]
            ]
        ];
    }

    /**
     * Lists all Cliente models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ClienteSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->sort = [
            'defaultOrder'=>['id'=>SORT_DESC]
        ];
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider
        ]);
    }

    /**
     * Creates a new Cliente model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Cliente();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        } else {
            return $this->render('create', [
                'model' => $model,
                //'categories' => ClienteCategory::find()->active()->all(),
            ]);
        }
    }

    public function actionEnviar($id)
    {
        $model = $this->findModel($id);
        // Busco las palabras del cliente
        $org = Organicas::findAll([
                'cliente_id'=>$id,
                'MONTH(fecha_registro)'=>date('m'),
                'YEAR(fecha_registro)'=>date('Y'),

            ]);

        $cantPalabras = count($org);


        if (empty($org)) {
            Yii::$app->session->setFlash('alert', [
                'body' => Yii::t('backend', ' No hay registros para enviar'),
                'options' => ['class' => 'alert alert-error']
            ],true);
            return $this->redirect(['index']);
        }

        $arrayPos = array();
        $tablaPos = '<table class="rwd-table">
        <tbody><tr>
        <th>Palabra Clave</th>
        <th>Posición</th>
        <th>Volumen de <br>tráfico</th><th>Costo <br>Por Clic</th>
        <th>URL</th></tr>';


        $con1 = 0;
        $con5 = 0;
        $con10 = 0;
        $con15 = 0;
        $con20 = 0;
        $con50 = 0;
        $con100 = 0;
        $con120 = 0;
        $conSupera = 0;
        $mayor = 0;
        $mayorTemp = 0;

        foreach ($org as $key => $posicion) :
            

           /* if(!in_array($posicion->posicion, $arrayPos)){
                $orgPos = Organicas::findAll([
                    'cliente_id'=>$id,
                    'MONTH(fecha_registro)'=>date('m'),
                    'YEAR(fecha_registro)'=>date('Y'),
                    'posicion'=>$posicion->posicion
                ]);



                $arrayPos[$posicion->posicion]=count($orgPos);
            }*/

            
//echo $posicion->posicion."<br>";
            switch ($posicion->posicion) {
                case 1:
                    $con1++; 
                    $mayorTemp = $con1;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;


                    break;
                case ($posicion->posicion>1 and $posicion->posicion<=5):
                    $con5++;
                    $mayorTemp = $con5;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;
                case ($posicion->posicion>5 and $posicion->posicion<=10):
                    $con10++;
                    $mayorTemp = $con10;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;     
                case ($posicion->posicion>10 and $posicion->posicion<=15):
                    $con15++;
                    $mayorTemp = $con15;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;
                case ($posicion->posicion>15 and $posicion->posicion<=20):
                    $con20++;
                    $mayorTemp = $con20;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;
                case ($posicion->posicion>20 and $posicion->posicion<=50):
                    $con50++;
                    $mayorTemp = $con50;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;
                case ($posicion->posicion>50 and $posicion->posicion<=100):
                    $con100++;
                    $mayorTemp = $con100;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;
                case ($posicion->posicion>100 and $posicion->posicion<=120):
                    $con120++;
                    $mayorTemp = $con120;
                    if ($mayorTemp>$mayor)
                        $mayor = $mayorTemp;
                    break;     
                default:
                    # code...
                    break;
            }

            //$arrayPos[$posicion->posicion]=count($orgPos);


            //echo $posicion->posicion."<br>";
            $tablaPos .= '<tr>
                <td data-th="Palabra">'.$posicion->palabra.'</td>
                <td data-th="Pos">'.$posicion->posicion.'</td>
                <td data-th="Volumen">'.$posicion->volumen.'</td>
                <td data-th="Costo">'.$posicion->costo.'</td>
                <td data-th="URL">'.$posicion->url.'</td>
              </tr>';
        endforeach;

        $tablaPos .= '</tbody></table>';

        //echo $tablaPos;


$ejeY = "";
$ejeX = "";
foreach ($arrayPos as $key => $value) {
    $ejeY .= $key.",";
    $ejeX .= $value."|";
   //echo $key." ".$value."<br>";
}

$ejeY = trim($ejeY,"|");
$ejeX = trim($ejeX,",");
//echo $ejeY;
//$urlImg = "https://chart.googleapis.com/chart?chs=500x250&cht=bvs&chd=t:".$ejeX."&chxt=x,y,x&chxl=1:|".$ejeY."|2:|Cantidad de Palabras claves posicionadas&chbh=100&chxs=0,000000,12,1,lt|1,222D32,8,0,lt|2,222D32,8,-1,lt&chco=5ABAD0&chg=15,20";
//ksort($arrayPos);
//$urlImg = "https://chart.googleapis.com/chart?chs=320x200&cht=bvs&chd=t:".$ejeY."&chxt=y,x&chxr=0,0,71,5&chxl=1:|".$ejeX."&chbh=35";
//$urlImg = "https://chart.googleapis.com/chart?chs=500x250&cht=bvg&chd=t:1,5,10&chxt=y,x&chxr=0,0,5,10&chxl=0:|0|5|10|1:|0|5|10&chbh=35";

$urlImg = "http://chart.apis.google.com/chart?
cht=bvg&chs=510x250&chd=t:".$con1.",".$con5.",".$con10.",".$con15.",".$con20.",".$con50.",".$con100.",".$con120."&
chxr=1,0,".$mayor.",1&chds=0,".$mayor."&
chco=5ABAD0&
chbh=25,0,30&
chxt=x,y,x&chxl=0:|Pos 1|Pos 5|Pos 10|Pos 15|Pos 20|Pos 50|Pos 100|Pos 120|2:||Posición||&chxs=2,000000,12&
chtt=Cantidad+palabras+claves+por+posicion&chts=000000,15&
chg=0,34,5,5";

/*
echo $mayor." ".$con1." ".$con5." ".$con10." ".$con15." ".$con20." ".$con50." ".$con100." ".$con120." ".$conSupera."<br>";

echo '<img src="'.$urlImg.'">';



echo "<pre>";
    var_dump($arrayPos);
echo "</pre>";

exit();
*/


// Busco los informes
$Inf = Informes::findAll([
        'cliente_id'=>$id,
        'MONTH(fecha)'=>date('m'),
        'YEAR(fecha)'=>date('Y'),
]);
$htmlInf = "";
foreach ($Inf as $key => $informe) {
    $htmlInf .='<span style="text-align:center;font-family:Helvetica,Arial,sans-serif;font-size:15px;margin-bottom:0;margin-top:3px;color:#5F5F5F;line-height:135%;">'.$informe->informe.'</span><br><br>';
}



        Yii::$app->mail->compose(['html' => 'prueba'], [
            'model'=>$model,
            'tablaPos'=>$tablaPos,
            'id'=>$id,
            'cantPalabras'=>$cantPalabras,
            'grafico'=>$urlImg,
            'informe'=>$htmlInf


            ])
     ->setFrom('juan@grupodeboss.com')
     ->setTo('jpherrera@gmail.com')
     ->setCc('alejandro@grupodeboss.com')
     ->setSubject('SEO')
     //->setTextBody('Plain text content')
     //->setHtmlBody('<b>HTML content</b>')
     ->send();

        Yii::$app->session->setFlash('alert', [
                'body' => Yii::t('backend', ' Se ha enviado el reporte'),
                'options' => ['class' => 'alert alert-success']
            ],true);
        return $this->redirect(['index']);


    }


    /**
     * Updates an existing Cliente model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        } else {
            return $this->render('update', [
                'model' => $model,
                //'categories' => ClienteCategory::find()->active()->all(),
            ]);
        }
    }

    /**
     * Deletes an existing Cliente model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Cliente model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Cliente the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Cliente::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
